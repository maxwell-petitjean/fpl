# -*- coding: utf-8 -*-
"""streamlit_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HZkyFy5QoeDLGpXL4hTXpfQl1ouDzEMt
"""

# streamlit_app.py
import streamlit as st
import pandas as pd
import numpy as np
import requests
import io
import pulp

# ================== BASIC CONFIG ==================
st.set_page_config(page_title="FPL Optimiser", layout="wide")
st.title("⚽ FPL Optimiser")
st.caption("Hit 'Run Model' to get started. 📱 Open the menu (☰) at the top-left to change inputs.")

# ================== GLOBAL CSS / THEME ==================
st.markdown("""
<style>
/* Page tweaks */
main { background: #fbfcfe; }
section[data-testid="stSidebar"] { background: #f6f8fb; }

/* DataFrame container rounding */
[data-testid="stDataFrame"] { border-radius: 12px; overflow: hidden; }

/* Make Run button wide and pretty */
div.stButton > button:first-child {
    width: 100%;
    background: linear-gradient(90deg, #4CAF50, #2fa84f);
    color: white;
    padding: 0.85em 1em;
    border-radius: 10px;
    border: none;
    font-size: 18px;
    font-weight: 700;
    transition: all .15s ease-in-out;
}
div.stButton > button:first-child:hover {
    transform: translateY(-1px);
}

/* Slightly larger inputs on mobile */
@media (max-width: 768px) {
  .stTextInput, .stTextArea, .stNumberInput { font-size: 16px !important; }
}
</style>
""", unsafe_allow_html=True)

# ================== GITHUB CSV LOADER ==================
GITHUB_BASE = "https://raw.githubusercontent.com/maxwell-petitjean/fpl/refs/heads/main/"

CSV_FILES = [
    "fixtures_23.csv",
    "fixtures_24.csv",
    "gws_24.csv",
    "players_23.csv",
    "players_24.csv",
    "teams_23.csv",
    "teams_24.csv",
]

@st.cache_data(show_spinner=False)
def load_csv(filename: str) -> pd.DataFrame:
    url = f"{GITHUB_BASE}{filename}"
    return pd.read_csv(url)

@st.cache_data(show_spinner=False)
def load_all_inputs():
    data = {}
    for f in CSV_FILES:
        try:
            data[f] = load_csv(f)
        except Exception as e:
            st.error(f"Could not load `{f}` from GitHub. Error: {e}")
            data[f] = pd.DataFrame()
    return data

# ================== INPUTS (simple & device-agnostic) ==================
colA, colB = st.columns([2, 1])

with colA:
    fpl_id_input = st.text_input(
        "FPL ID (not live yet - only available after gw1 fixtures consolidated data)",
        value=""
    )

with colB:
    budget_input = st.number_input("Budget", value=1000, step=1)

col1, col2 = st.columns(2)
with col1:
    exclude_names_input = st.text_area(
        "Exclude Names (comma separated)",
        value="Rayan Aït-Nouri, Bryan Mbeumo"
    ).split(",")
with col2:
    exclude_teams_input = st.text_area(
        "Exclude Teams (comma separated)",
        value="BRE"
    ).split(",")

include_names_input = st.text_area("Include Names (comma separated)").split(",")

# ================== SESSION STATE (store last results) ==================
if "final_team" not in st.session_state:
    st.session_state.final_team = None
if "raw_output" not in st.session_state:
    st.session_state.raw_output = None

# ================== OPTIMISER ==================
def add_weekly_position_constraints(prob, week_vars, output, weeks):
    """Ensure weekly XI has 1 GKP and valid DEF/MID/FWD ranges."""
    for w in weeks:
        # exactly 11 starters
        prob += pulp.lpSum(week_vars[w][i] for i in output.index) == 11

        # 1 keeper
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i, "pos"] == "GKP") == 1
        # DEF 3..5
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i, "pos"] == "DEF") >= 3
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i, "pos"] == "DEF") <= 5
        # MID 2..5
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i, "pos"] == "MID") >= 2
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i, "pos"] == "MID") <= 5
        # FWD 1..3
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i, "pos"] == "FWD") >= 1
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i, "pos"] == "FWD") <= 3

def run_model(fpl_id, exclude_names, exclude_teams, include_names, budget):
    """
    Build your `output` DataFrame then optimise squad selection.
    Required columns in `output`:
      - name, team, pos, cost, net_points
      - gw1..gw6 (weekly projected points)
      - ownership, xm, fdr, base_points
      - pos_id (for sorting; e.g., map {'GKP':1,'DEF':2,'MID':3,'FWD':4})
    """
    data = load_all_inputs()
    # df_fixtures_23 = data["fixtures_23.csv"]
    # df_fixtures_24 = data["fixtures_24.csv"]
    # df_gws_24      = data["gws_24.csv"]
    # df_players_23  = data["players_23.csv"]
    # df_players_24  = data["players_24.csv"]
    # df_teams_23    = data["teams_23.csv"]
    # df_teams_24    = data["teams_24.csv"]

    # --------------------------------------------------------------------
    # TODO: PASTE YOUR EXISTING DATA WRANGLING HERE TO BUILD `output`
    # It should create a DataFrame named `output` with the columns listed above.
    # --------------------------------------------------------------------

    # === Temporary fallback (so the app runs even before you paste logic) ===
    # Remove this block once you paste your real output builder.
    if "output" not in locals():
        rng = np.random.default_rng(7)
        names = [f"Player {i}" for i in range(1, 41)]
        pos_choices = ["GKP"]*4 + ["DEF"]*14 + ["MID"]*14 + ["FWD"]*8
        teams = ["ARS","AVL","BRE","CHE","CRY","EVE","FUL","LIV","MCI","MUN","NEW","NFO","SHU","SOU","TOT","WHU","WOL","BHA","BOU","LEE"][:10]
        output = pd.DataFrame({
            "name": names,
            "team": rng.choice(teams, size=len(names)),
            "pos": rng.choice(pos_choices, size=len(names)),
            "cost": rng.uniform(4.0, 12.5, size=len(names)).round(2),
            "ownership": rng.uniform(0, 80, size=len(names)),
            "net_points": rng.uniform(30, 120, size=len(names)),
            "xm": rng.uniform(50, 95, size=len(names)),
            "fdr": rng.integers(2, 5, size=len(names)),
            "base_points": rng.uniform(20, 100, size=len(names)),
            "gw1": rng.uniform(0, 12, size=len(names)),
            "gw2": rng.uniform(0, 12, size=len(names)),
            "gw3": rng.uniform(0, 12, size=len(names)),
            "gw4": rng.uniform(0, 12, size=len(names)),
            "gw5": rng.uniform(0, 12, size=len(names)),
            "gw6": rng.uniform(0, 12, size=len(names)),
        })
        pos_map = {"GKP":1,"DEF":2,"MID":3,"FWD":4}
        output["pos_id"] = output["pos"].map(pos_map)

    # === Apply user include/exclude ===
    if exclude_names:
        mask = ~output["name"].isin([n.strip() for n in exclude_names if n.strip()])
        output = output[mask]
    if exclude_teams:
        mask = ~output["team"].isin([t.strip() for t in exclude_teams if t.strip()])
        output = output[mask]
    # include_names as hard locks handled in constraints (below)

    # === LP Optimisation (squad of 15, 2 GKP, 5 DEF, 5 MID, 3 FWD, budget, <=3 per team) ===
    prob = pulp.LpProblem("FPL_Team_Selection", pulp.LpMaximize)
    player_vars = pulp.LpVariable.dicts("Player", output.index, 0, 1, pulp.LpBinary)

    # 15-man squad
    prob += pulp.lpSum(player_vars[i] for i in output.index) == 15
    # position totals (squad-level)
    prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, "pos"] == "GKP") == 2
    prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, "pos"] == "DEF") == 5
    prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, "pos"] == "MID") == 5
    prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, "pos"] == "FWD") == 3

    # budget
    prob += pulp.lpSum(output.loc[i, "cost"] * player_vars[i] for i in output.index) <= budget

    # max 3 per real team
    for team in output["team"].unique():
        prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, "team"] == team) <= 3

    # include/exclude locks
    include_names = [x.strip() for x in include_names if x and x.strip()]
    for i in output.index:
        if output.loc[i, "name"] in include_names:
            prob += player_vars[i] == 1

    # === Weekly XI variables & constraints ===
    weeks = ["gw1","gw2","gw3","gw4","gw5","gw6"]
    week_vars = {w: pulp.LpVariable.dicts(f"Week_{w}", output.index, 0, 1, pulp.LpBinary) for w in weeks}

    # link starters to selected squad
    for w in weeks:
        for i in output.index:
            prob += week_vars[w][i] <= player_vars[i]

    # weekly XI formation rules
    add_weekly_position_constraints(prob, week_vars, output, weeks)

    # === Objective: maximise total projected points across weeks (starting XI only) ===
    prob += pulp.lpSum(output.loc[i, w] * week_vars[w][i] for w in weeks for i in output.index)

    # Solve
    _ = prob.solve(pulp.PULP_CBC_CMD(msg=False))

    # Extract selected squad
    chosen_mask = [player_vars[i].value() == 1 for i in output.index]
    selected_team = output.loc[chosen_mask].copy()

    # Starting weeks text
    def weeks_str(i):
        on = [w for w in weeks if week_vars[w][i].value() == 1]
        return ", ".join(on)
    selected_team["starting_weeks"] = selected_team.index.map(weeks_str)

    # Sort nicely
    if "pos_id" not in selected_team.columns:
        pos_map = {"GKP":1,"DEF":2,"MID":3,"FWD":4}
        selected_team["pos_id"] = selected_team["pos"].map(pos_map)

    selected_team = selected_team.sort_values(
        by=["pos_id","cost","net_points"], ascending=[True, False, False]
    )

    # Final column order (keep flexible if some are missing)
    col_order = [
        "name","team","pos","cost","ownership","net_points","xm","fdr","base_points",
        "gw1","gw2","gw3","gw4","gw5","gw6","starting_weeks"
    ]
    col_order = [c for c in col_order if c in selected_team.columns]
    selected_team = selected_team[col_order]

    return selected_team, output

# ================== RUN BUTTON ==================
run_clicked = st.button("🚀 Run Model")

if run_clicked:
    exclude_names_clean = [n.strip() for n in exclude_names_input if n.strip()]
    exclude_teams_clean = [t.strip() for t in exclude_teams_input if t.strip()]
    include_names_clean = [n.strip() for n in include_names_input if n.strip()]

    with st.spinner("Optimising your squad... please wait ⏳"):
        final_team, raw_output = run_model(
            fpl_id_input if fpl_id_input else None,
            exclude_names_clean,
            exclude_teams_clean,
            include_names_clean,
            budget_input
        )

    # Round numeric values & cache
    for df in [final_team, raw_output]:
        num_cols = df.select_dtypes(include=[np.number]).columns
        df[num_cols] = df[num_cols].round(2)

    st.session_state.final_team = final_team
    st.session_state.raw_output = raw_output
    st.success("✅ Model run complete!")

# ================== SHOW TABS (only when we have results) ==================
if st.session_state.final_team is not None and st.session_state.raw_output is not None:

    def highlight_pos(val):
        color_map = {"GKP":"#FFD700","DEF":"#90EE90","MID":"#ADD8E6","FWD":"#FFB6C1"}
        return f"background-color: {color_map.get(val, 'white')}"

    tab1, tab2, tab3, tab4 = st.tabs([
        "📋 Full Squad",
        "📊 Summary",
        "📄 Research Players",
        "📖 Glossary"
    ])

    # --- Tab 1: Full Squad ---
    with tab1:
        ft = st.session_state.final_team.copy()
        numeric_cols = ft.select_dtypes(include=[np.number]).columns
        try:
            styled = (ft.style
                        .applymap(highlight_pos, subset=["pos"])
                        .background_gradient(subset=numeric_cols, cmap="YlGnBu")
                        .format(precision=2))
            st.dataframe(styled, use_container_width=True, height=800)
        except Exception:
            # If matplotlib isn't present for gradient styling on some envs
            st.dataframe(ft, use_container_width=True, height=800)

        csv = ft.to_csv(index=False)
        st.download_button("⬇️ Download squad as CSV", csv, "squad.csv", "text/csv")

    # --- Tab 2: Summary ---
    with tab2:
        ft = st.session_state.final_team
        total_cost = ft["cost"].sum() if "cost" in ft.columns else np.nan
        total_pts = ft["net_points"].sum() if "net_points" in ft.columns else np.nan
        c1, c2 = st.columns(2)
        with c1: st.metric("💰 Total Cost", f"{total_cost:.2f}" if pd.notna(total_cost) else "—")
        with c2: st.metric("📈 Total Points", f"{total_pts:.2f}" if pd.notna(total_pts) else "—")

    # --- Tab 3: Research Players (sorted + position filter; does NOT re-run model) ---
    with tab3:
        raw_output = st.session_state.raw_output.copy()
        if "net_points" in raw_output.columns:
            raw_output = raw_output.sort_values(by="net_points", ascending=False)

        # Position filter (works on cached results only)
        if "pos" in raw_output.columns:
            positions = raw_output["pos"].dropna().unique().tolist()
            positions = sorted(positions, key=lambda x: {"GKP":1,"DEF":2,"MID":3,"FWD":4}.get(x, 99))
        else:
            positions = []

        pos_filter = st.multiselect("Filter by position", options=positions, default=positions)
        if positions:
            filtered = raw_output[raw_output["pos"].isin(pos_filter)]
        else:
            filtered = raw_output

        num_cols_raw = filtered.select_dtypes(include=[np.number]).columns
        try:
            styled_raw = (filtered.style
                                    .background_gradient(subset=num_cols_raw, cmap="YlGnBu")
                                    .format(precision=2))
            st.dataframe(styled_raw, use_container_width=True, height=800)
        except Exception:
            st.dataframe(filtered, use_container_width=True, height=800)

        st.info("Tip: Change filters and press **Run Model** again to recompute with new constraints.")

    # --- Tab 4: Glossary ---
    with tab4:
        st.subheader("📖 Glossary of Terms")
        st.markdown("""
**net_points** – Projected points after adjustments
**cost** – Player price (£m)
**ownership** – % of FPL managers owning this player
**xm** – Expected minutes per game
**fdr** – Fixture difficulty rating (lower = easier)
**base_points** – Baseline points ignoring bonuses/penalties
**gw1–gw6** – Projected points per Gameweek
**starting_weeks** – Gameweeks selected in your XI by the optimiser
        """)

else:
    st.info("Click **Run Model** to compute your squad.")