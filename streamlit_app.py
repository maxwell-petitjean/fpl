{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOUu9sbqn1EpsPpmZ0XeYSI"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# 📌 Single Colab Cell — FPL Optimiser with Upgraded UI\n",
        "# 1. Replace YOUR_NGROK_AUTHTOKEN with your own token\n",
        "# 2. Run the cell\n",
        "# 3. Click the printed ngrok URL\n",
        "\n",
        "!pip install --quiet streamlit pyngrok pulp pandas numpy requests\n",
        "\n",
        "from pyngrok import ngrok\n",
        "ngrok.set_auth_token(\"319sCAWPOoKGaew5JgWfTtBBRfA_rUmjNWqoVLNzfNue2Mri\")  # <-- REPLACE\n",
        "\n",
        "# ================= Streamlit App Code =================\n",
        "streamlit_code = r\"\"\"\n",
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import requests\n",
        "import pulp\n",
        "\n",
        "# ========== CONFIG ==========\n",
        "GITHUB_BASE = \"https://raw.githubusercontent.com/maxwell-petitjean/fpl/refs/heads/main/\"\n",
        "VAR_GW = 1\n",
        "VAR_REL1, VAR_REL2, VAR_REL3 = 'IPS', 'LEI', 'SOU'\n",
        "VAR_PRO1, VAR_PRO2, VAR_PRO3 = 'BUR', 'LEE', 'SUN'\n",
        "URL1 = 'https://fantasy.premierleague.com/api/bootstrap-static/'\n",
        "URL2 = 'https://fantasy.premierleague.com/api/fixtures?future=1'\n",
        "\n",
        "# ========== PAGE CONFIG ==========\n",
        "st.set_page_config(page_title=\"FPL Optimiser\", layout=\"wide\")\n",
        "st.title(\"⚽ FPL Optimiser\")\n",
        "\n",
        "# ========== SIDEBAR INPUTS ==========\n",
        "st.sidebar.header(\"⚙️ Input Parameters\")\n",
        "fpl_id_input = st.sidebar.text_input(\"FPL ID (not live yet - only available after gw1 fixtures consolidated data)\")\n",
        "exclude_names_input = st.sidebar.text_area(\"Exclude Names (comma separated)\",value=\"Rayan Aït-Nouri, Bryan Mbeumo\").split(\",\")\n",
        "exclude_teams_input = st.sidebar.text_area(\"Exclude Teams (comma separated)\",value=\"BRE\").split(\",\")\n",
        "\n",
        "include_names_input = st.sidebar.text_area(\"Include Names (comma separated)\").split(\",\")\n",
        "budget_input = st.sidebar.number_input(\"Budget\", value=1000, step=1)\n",
        "\n",
        "# ========== HELPERS ==========\n",
        "@st.cache_data\n",
        "def load_csv(filename):\n",
        "    url = GITHUB_BASE + filename\n",
        "    return pd.read_csv(url)\n",
        "\n",
        "# ============= MODEL FUNCTION =============\n",
        "def run_model(fpl_id, exclude_names, exclude_teams, include_names, budget):\n",
        "    # ---- Load API data ----\n",
        "    json1 = requests.get(URL1).json()\n",
        "    json2 = requests.get(URL2).json()\n",
        "\n",
        "    teams = pd.DataFrame(json1['teams'])[['id','name','short_name','strength_attack_home','strength_defence_home','strength_attack_away','strength_defence_away']]\n",
        "    teams.columns = ['team_id','team_name','team_code','str_o_h','str_d_h','str_o_a','str_d_a']\n",
        "\n",
        "    positions = pd.DataFrame(json1['element_types'])[['id','singular_name_short']]\n",
        "    positions.columns = ['id','pos']\n",
        "\n",
        "    # ---- Load CSVs from GitHub ----\n",
        "    players_prev_1 = load_csv(\"players_24.csv\")\n",
        "    players_prev_2 = load_csv(\"players_23.csv\")\n",
        "    fixtures_prev = load_csv(\"fixtures_24.csv\")\n",
        "    fixtures_prev0 = load_csv(\"gws_24.csv\")\n",
        "    teams3 = load_csv(\"teams_24.csv\")\n",
        "\n",
        "    # ---- Players - Previous Seasons ----\n",
        "    players_prev_11 = players_prev_1[['first_name','second_name','element_type','total_points','minutes']]\n",
        "    players_prev_21 = players_prev_2[['first_name','second_name','element_type','total_points','minutes']]\n",
        "\n",
        "    players_prev0 = pd.concat([players_prev_11,players_prev_21])\n",
        "    players_prev1 = players_prev0.reset_index()\n",
        "    players_prev1['name'] = players_prev1['first_name']+' '+players_prev1['second_name']\n",
        "    players_prev1 = players_prev1[players_prev1['element_type'] != 'AM']\n",
        "\n",
        "    players_prev2 = pd.pivot_table(players_prev1, values=['total_points','minutes'], index=['name'], aggfunc=[np.sum], fill_value=0)\n",
        "    players_prev3 = players_prev2.reset_index()\n",
        "    players_prev3.columns = players_prev3.columns.droplevel(0)\n",
        "    players_prev4 = players_prev3.rename({players_prev3.columns[0]:'name',players_prev3.columns[1]:'minutes',players_prev3.columns[2]:'points'}, axis='columns')\n",
        "    players_prev5 = players_prev4.copy()\n",
        "    players_prev5['pp90'] = players_prev5['points'] / (players_prev5['minutes']/90)\n",
        "    players_prev6 = players_prev5.fillna(0)\n",
        "    players_prev6['pp90'] = round(players_prev6['pp90'],2)\n",
        "    players_prev7 = players_prev6.sort_values('points',ascending=False)\n",
        "\n",
        "    # ---- Fixtures - Previous Season ----\n",
        "    fixtures_prev1 = fixtures_prev0.drop(fixtures_prev0[fixtures_prev0['GW']< 29].index)\n",
        "    fixtures_prev2 = fixtures_prev1[['GW','name','position','total_points','starts','minutes','expected_goals','expected_assists','clean_sheets']]\n",
        "    fixtures_prev3 = fixtures_prev2[fixtures_prev2['position'] != 'AM']\n",
        "    fixtures_prev4 = pd.pivot_table(fixtures_prev3, values=['total_points','starts','minutes','expected_goals','expected_assists','clean_sheets'], index=['name','position'], aggfunc=[np.sum], fill_value=0)\n",
        "    fixtures_prev5 = fixtures_prev4.reset_index()\n",
        "    fixtures_prev5.columns = fixtures_prev5.columns.droplevel(0)\n",
        "    fixtures_prev5.columns = ['name','pos','cs','xa','xg','mins','starts','points']\n",
        "    fixtures_prev6 = fixtures_prev5.copy()\n",
        "    fixtures_prev6['xm'] = round(fixtures_prev6['mins']/10,2)\n",
        "    fixtures_prev7 = fixtures_prev6.copy()\n",
        "    fixtures_prev7['pp90'] = round(fixtures_prev7['points'] / (fixtures_prev7['mins']/90),2)\n",
        "    fixtures_prev8 = fixtures_prev7.copy()\n",
        "    fixtures_prev8['cspp90'] = round((fixtures_prev8['cs']*4) / (fixtures_prev8['mins']/90),2)\n",
        "    fixtures_prev9 = fixtures_prev8.copy()\n",
        "    fixtures_prev9['xap'] = fixtures_prev9['xa']*3\n",
        "    fixtures_prev9['xgp'] = np.where((fixtures_prev9['pos'] == 'FWD'), fixtures_prev9['xg'] * 4,\n",
        "                            np.where((fixtures_prev9['pos'] == 'MID'), fixtures_prev9['xg'] * 5,\n",
        "                            np.where((fixtures_prev9['pos'] == 'DEF') | (fixtures_prev9['pos'] == 'GKP'), fixtures_prev9['xg'] * 6,0 )))\n",
        "    fixtures_prev9['xop'] = fixtures_prev9['xap']+fixtures_prev9['xgp']\n",
        "    fixtures_prev10 = fixtures_prev9.copy()\n",
        "    fixtures_prev10['xopp90'] = round((fixtures_prev10['xop']) / (fixtures_prev10['mins']/90),2)\n",
        "    fixtures_prev10 = fixtures_prev10.fillna(0)\n",
        "\n",
        "    # ---- Merge player stats ----\n",
        "    players_prev8 = players_prev7.copy()\n",
        "    players_prev8.columns = ['name_l2y','mins_l2y','points_l2y','pp90_l2y']\n",
        "    fixtures_prev11 = fixtures_prev10.copy()\n",
        "    fixtures_prev11.columns = ['name_lyf','pos_lyf','cs_lyf','xa_lyf','xg_lyf','mins_lyf','starts_lyf','points_lyf','xm_lyf','pp90_lyf','cspp90_lyf','xap_lyf','xgp_lyf','xop_lyf','xopp90_lyf']\n",
        "\n",
        "    players = pd.DataFrame(json1['elements'])\n",
        "    players1 = players[['id','first_name','second_name','team','element_type','now_cost','selected_by_percent','clearances_blocks_interceptions','recoveries','tackles','clean_sheets','expected_assists','expected_goals','total_points','minutes']]\n",
        "    players2 = players1.merge(teams[['team_id', 'team_code']], left_on='team', right_on='team_id').merge(positions[['id', 'pos']], left_on='element_type', right_on='id')\n",
        "    players3 = players2.copy()\n",
        "    players3['name'] = players3['first_name']+' '+players3['second_name']\n",
        "    players3['cbrit'] = players3['clearances_blocks_interceptions']+players3['recoveries']+players3['tackles']\n",
        "    players4 = players3[['id_x','name','team_code','pos','now_cost','selected_by_percent','cbrit','clean_sheets','expected_assists','expected_goals','total_points','minutes']]\n",
        "    players4.columns = ['id','name','team','pos','cost','ownership','cbrit','cs','xa','xg','points','mins']\n",
        "\n",
        "    players5 = players4.merge(players_prev8, left_on='name', right_on='name_l2y').merge(fixtures_prev11, left_on='name', right_on='name_lyf')\n",
        "\n",
        "    # ---- Build fixture difficulty ----\n",
        "    team_gw_prev1 = fixtures_prev1[['GW','position','team','opponent_team','was_home','total_points','minutes']]\n",
        "    team_gw_prev1['played60'] = np.where((team_gw_prev1['minutes'] > 60),1,0)\n",
        "    team_gw_prev2 = team_gw_prev1.drop(team_gw_prev1[team_gw_prev1['played60'] == 0].index)\n",
        "    team_gw_prev2['pos'] = np.where((team_gw_prev2['position'] == 'MID')|(team_gw_prev2['position'] == 'FWD'),'ATT', team_gw_prev2['position'])\n",
        "    team_gw_prev3 = pd.pivot_table(team_gw_prev2, values=['total_points','played60'], index=['opponent_team','was_home','pos'], aggfunc=[np.sum], fill_value=0)\n",
        "    team_gw_prev3 = team_gw_prev3.reset_index()\n",
        "    team_gw_prev3.columns = team_gw_prev3.columns.droplevel(0)\n",
        "    team_gw_prev3.columns = ['team','home','pos','players','points']\n",
        "    team_gw_prev4 = team_gw_prev3.copy()\n",
        "    team_gw_prev4['ppg'] = team_gw_prev4['points'] / team_gw_prev4['players']\n",
        "    team_gw_prev5 = team_gw_prev4.copy()\n",
        "    team_gw_prev5['ppgh'] = np.where((team_gw_prev5['home'] == True),team_gw_prev5['ppg'],0)\n",
        "    team_gw_prev5['ppga'] = np.where((team_gw_prev5['home'] == False),team_gw_prev5['ppg'],0)\n",
        "    team_gw_prev6 = pd.pivot_table(team_gw_prev5, values=['ppgh','ppga'], index=['team','pos'], aggfunc=[np.sum], fill_value=0).reset_index()\n",
        "    team_gw_prev6.columns = team_gw_prev6.columns.droplevel(0)\n",
        "    team_gw_prev6.columns = ['team','pos','ppgh','ppga']\n",
        "    team_gw_prev7 = team_gw_prev6.merge(teams3[['id', 'short_name']], left_on='team', right_on='id')\n",
        "    team_gw_prev8 = team_gw_prev7[['short_name','pos','ppgh','ppga']]\n",
        "    team_gw_prev8.columns = ['team_code','pos','ppgh','ppga']\n",
        "    team_gw_prev8['team_new'] = np.where(team_gw_prev8['team_code'] == VAR_REL1, VAR_PRO1,\n",
        "                                 np.where(team_gw_prev8['team_code'] == VAR_REL2, VAR_PRO2,\n",
        "                                 np.where(team_gw_prev8['team_code'] == VAR_REL3, VAR_PRO3, team_gw_prev8['team_code'])))\n",
        "    team_gw_prev9 = team_gw_prev8.merge(teams[['team_code','team_id']], left_on='team_new', right_on='team_code')\n",
        "\n",
        "    # ---- Upcoming fixtures ----\n",
        "    fixtures = pd.DataFrame(json2)[['event','team_h','team_a']]\n",
        "    fixtures2 = fixtures.drop(fixtures[fixtures['event'] > (VAR_GW + 5)].index)\n",
        "    fixtures2 = fixtures2.drop(fixtures2[fixtures2['event'] < VAR_GW].index)\n",
        "    fixtures_h1 = fixtures2.pivot(index='team_h', columns='event', values='team_a').reset_index().fillna(0).astype(int)\n",
        "    fixtures_a1 = fixtures2.pivot(index='team_a', columns='event', values='team_h').reset_index().fillna(0).astype(int)\n",
        "    fixtures_h1.columns = ['team_h','a1','a2','a3','a4','a5','a6']\n",
        "    fixtures_a1.columns = ['team_a','h1','h2','h3','h4','h5','h6']\n",
        "\n",
        "    lookup_team1 = dict(zip(teams[['team_id','team_code']].team_id, teams[['team_id','team_code']].team_code))\n",
        "    fixtures_h4 = fixtures_h1.replace(lookup_team1)\n",
        "    fixtures_a4 = fixtures_a1.replace(lookup_team1)\n",
        "\n",
        "    # ---- Merge fixtures into players ----\n",
        "    fix_att1 = team_gw_prev9[team_gw_prev9['pos'] == 'ATT']\n",
        "    fix_def1 = team_gw_prev9[team_gw_prev9['pos'] == 'DEF']\n",
        "    fix_gk1 = team_gw_prev9[team_gw_prev9['pos'] == 'GK']\n",
        "\n",
        "    lookup_home_att = dict(zip(fix_att1['team_new'], fix_att1['ppgh']))\n",
        "    lookup_home_def = dict(zip(fix_def1['team_new'], fix_def1['ppgh']))\n",
        "    lookup_home_gk = dict(zip(fix_gk1['team_new'], fix_gk1['ppgh']))\n",
        "    lookup_away_att = dict(zip(fix_att1['team_new'], fix_att1['ppga']))\n",
        "    lookup_away_def = dict(zip(fix_def1['team_new'], fix_def1['ppga']))\n",
        "    lookup_away_gk = dict(zip(fix_gk1['team_new'], fix_gk1['ppga']))\n",
        "\n",
        "    # turn home fixtures into future points\n",
        "    fixtures_home_att = fixtures_h4.copy()\n",
        "    fixtures_home_def = fixtures_h4.copy()\n",
        "    fixtures_home_gk = fixtures_h4.copy()\n",
        "\n",
        "    cols_to_replace1 = fixtures_home_att.columns[1:]\n",
        "    cols_to_replace2 = fixtures_home_def.columns[1:]\n",
        "    cols_to_replace3 = fixtures_home_gk.columns[1:]\n",
        "\n",
        "    fixtures_home_att[cols_to_replace1] = fixtures_home_att[cols_to_replace1].replace(lookup_away_att)\n",
        "    fixtures_home_def[cols_to_replace2] = fixtures_home_def[cols_to_replace2].replace(lookup_away_def)\n",
        "    fixtures_home_gk[cols_to_replace3] = fixtures_home_gk[cols_to_replace3].replace(lookup_away_gk)\n",
        "\n",
        "    # turn away fixtures into future points\n",
        "    fixtures_away_att = fixtures_a4.copy()\n",
        "    fixtures_away_def = fixtures_a4.copy()\n",
        "    fixtures_away_gk = fixtures_a4.copy()\n",
        "\n",
        "    cols_to_replace4 = fixtures_away_att.columns[1:]\n",
        "    cols_to_replace5 = fixtures_away_def.columns[1:]\n",
        "    cols_to_replace6 = fixtures_away_gk.columns[1:]\n",
        "\n",
        "    fixtures_away_att[cols_to_replace4] = fixtures_away_att[cols_to_replace4].replace(lookup_home_att)\n",
        "    fixtures_away_def[cols_to_replace5] = fixtures_away_def[cols_to_replace5].replace(lookup_home_def)\n",
        "    fixtures_away_gk[cols_to_replace6] = fixtures_away_gk[cols_to_replace6].replace(lookup_home_gk)\n",
        "\n",
        "    new_cols = ['team','op1','op2','op3','op4','op5','op6']\n",
        "    for df in [fixtures_home_att,fixtures_home_def,fixtures_home_gk,fixtures_away_att,fixtures_away_def,fixtures_away_gk]:\n",
        "        df.columns = new_cols\n",
        "\n",
        "    fixtures_att = pd.concat([fixtures_home_att,fixtures_away_att])\n",
        "    fixtures_def = pd.concat([fixtures_home_def,fixtures_away_def])\n",
        "    fixtures_gk = pd.concat([fixtures_home_gk,fixtures_away_gk])\n",
        "\n",
        "    fixtures_att1 = fixtures_att.groupby('team', as_index=False).sum()\n",
        "    fixtures_def1 = fixtures_def.groupby('team', as_index=False).sum()\n",
        "    fixtures_gk1 = fixtures_gk.groupby('team', as_index=False).sum()\n",
        "\n",
        "    fixtures_att1['fdr'] = fixtures_att1.iloc[:,1:].sum(axis=1)\n",
        "    fixtures_def1['fdr'] = fixtures_def1.iloc[:,1:].sum(axis=1)\n",
        "    fixtures_gk1['fdr'] = fixtures_gk1.iloc[:,1:].sum(axis=1)\n",
        "\n",
        "    gkp_df = players5[players5['pos'] == 'GKP'].merge(fixtures_gk1, on='team', how='left')\n",
        "    def_df = players5[players5['pos'] == 'DEF'].merge(fixtures_def1, on='team', how='left')\n",
        "    att_df = players5[~players5['pos'].isin(['GKP', 'DEF'])].merge(fixtures_att1, on='team', how='left')\n",
        "    players7 = pd.concat([gkp_df, def_df, att_df], ignore_index=True).sort_values(by='cost', ascending=False).reset_index(drop=True)\n",
        "\n",
        "    # ---- Add extra player data ----\n",
        "    player_data = players[['first_name','second_name','ep_next','chance_of_playing_next_round','clean_sheets_per_90','defensive_contribution_per_90','expected_goals_per_90','expected_assists_per_90']]\n",
        "    player_data['name'] = player_data['first_name']+' '+player_data['second_name']\n",
        "    player_data = player_data.drop(columns=['first_name', 'second_name'])\n",
        "    player_data.columns = ['ep_fpl','flag_fpl','csp90_fpl','dcpp90_fpl','xgp90_fpl','xap90_fpl','name_fpl']\n",
        "    players8 = players7.merge(player_data,left_on='name',right_on='name_fpl',how='left')\n",
        "    players8['xm'] = np.where(players8['flag_fpl'].isna(), players8['xm_lyf'], players8['xm_lyf'] * players8['flag_fpl'])\n",
        "    players8['xm'] = np.clip(players8['xm'], 0, 90)\n",
        "    players8['xm_l2y'] = players8['mins']/38\n",
        "    players8['xm'] = round((players8['xm'] + players8['xm_l2y']) / 2 ,2)\n",
        "\n",
        "    players9 = players8.copy()\n",
        "    players9['xapp90_fpl'] = players9['xap90_fpl']*3\n",
        "    players9['cspp90_fpl'] = players9['csp90_fpl']*4\n",
        "    players9['xgpp90_fpl'] = np.where((players9['pos'] == 'FWD'), players9['xgp90_fpl'] * 4,\n",
        "                             np.where((players9['pos'] == 'MID'), players9['xgp90_fpl'] * 5,\n",
        "                             np.where((players9['pos'] == 'DEF') | (players9['pos'] == 'GKP'), players9['xgp90_fpl'] * 6,0 )))\n",
        "    players9['xopp90_fpl'] = players9['xapp90_fpl']+players9['xgpp90_fpl']\n",
        "    players9['pred_lyf'] = players9['cspp90_lyf']+players9['xopp90_lyf']+2\n",
        "    players9['pred_fpl'] = players9['cspp90_fpl']+players9['xopp90_fpl']+2\n",
        "    players9['ep_fpl'] = pd.to_numeric(players9['ep_fpl'], errors='coerce')\n",
        "    players9['mean_value'] = players9[['pp90_l2y','pred_lyf','pred_fpl','pp90_lyf','ep_fpl']].mean(axis=1)\n",
        "    players9['base_points'] = round((players9['mean_value']/85) * players9['xm'] ,2)\n",
        "    for w in ['gw1','gw2','gw3','gw4','gw5','gw6']:\n",
        "        players9[w] = round(players9[[f'op{w[-1]}','base_points']].mean(axis=1),2)\n",
        "    players9['net_points'] = players9[[f'gw{i}' for i in range(1,7)]].sum(axis=1)\n",
        "    players9['fdr'] = round(players9['fdr'],2)\n",
        "\n",
        "    players10 = players9.sort_values(by='points', ascending=False)\n",
        "    players10 = players10[np.isfinite(players10['net_points'])]\n",
        "    players10 = players10[np.isfinite(players10['xm_lyf'])]\n",
        "\n",
        "    final_pos = positions[['pos','id']]\n",
        "    final_pos.columns = ['pos_code','pos_id']\n",
        "    players10 = players10.merge(final_pos,left_on='pos',right_on='pos_code',how='left')\n",
        "    output = players10[['name','team','pos','pos_id','cost','ownership','points','mins','xm','fdr','pp90_l2y','pp90_lyf','pred_lyf','pred_fpl','ep_fpl','base_points','gw1','gw2','gw3','gw4','gw5','gw6','net_points']]\n",
        "    output = output[['name','team','pos','pos_id','cost','ownership','net_points','xm','fdr','base_points','gw1','gw2','gw3','gw4','gw5','gw6']]\n",
        "    output = output.head(220)\n",
        "\n",
        "    # ---- FPL ID Squad Fetch ----\n",
        "    if fpl_id:\n",
        "        picks_url = f\"https://fantasy.premierleague.com/api/entry/{fpl_id}/event/{VAR_GW}/picks/\"\n",
        "        picks_data = requests.get(picks_url).json()\n",
        "        player_ids = [p['element'] for p in picks_data['picks']]\n",
        "        players_data = requests.get(URL1).json()['elements']\n",
        "        id_to_name = {p['id']: p['web_name'] for p in players_data}\n",
        "        include_names = [id_to_name[pid] for pid in player_ids if pid in id_to_name]\n",
        "\n",
        "    # ---- LP Optimisation ----\n",
        "    prob = pulp.LpProblem(\"FPL_Team_Selection\", pulp.LpMaximize)\n",
        "    player_vars = pulp.LpVariable.dicts(\"Player\", output.index, 0, 1, pulp.LpBinary)\n",
        "\n",
        "    prob += pulp.lpSum(player_vars[i] for i in output.index) == 15\n",
        "    prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, 'pos'] == 'GKP') == 2\n",
        "    prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, 'pos'] == 'DEF') == 5\n",
        "    prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, 'pos'] == 'MID') == 5\n",
        "    prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, 'pos'] == 'FWD') == 3\n",
        "    prob += pulp.lpSum(output.loc[i, 'cost'] * player_vars[i] for i in output.index) <= budget\n",
        "\n",
        "    for team in output['team'].unique():\n",
        "        prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, 'team'] == team) <= 3\n",
        "\n",
        "    for i in output.index:\n",
        "        if output.loc[i, 'name'] in exclude_names or output.loc[i, 'team'] in exclude_teams:\n",
        "            prob += player_vars[i] == 0\n",
        "        if output.loc[i, 'name'] in include_names:\n",
        "            prob += player_vars[i] == 1\n",
        "\n",
        "    weeks = ['gw1', 'gw2', 'gw3', 'gw4', 'gw5', 'gw6']\n",
        "    week_vars = {w: pulp.LpVariable.dicts(f\"Week_{w}\", output.index, 0, 1, pulp.LpBinary) for w in weeks}\n",
        "    for w in weeks:\n",
        "        for i in output.index:\n",
        "            prob += week_vars[w][i] <= player_vars[i]\n",
        "        prob += pulp.lpSum(week_vars[w][i] for i in output.index) == 11\n",
        "\n",
        "    prob += pulp.lpSum(output.loc[i, w] * week_vars[w][i] for w in weeks for i in output.index)\n",
        "    prob.solve()\n",
        "\n",
        "    selected_team = output[[player_vars[i].value() == 1 for i in output.index]].copy()\n",
        "    selected_team['starting_weeks'] = selected_team.index.map(lambda i: ', '.join([w for w in weeks if week_vars[w][i].value() == 1]))\n",
        "    selected_team = selected_team.sort_values(by=['pos_id', 'cost', 'net_points'], ascending=[True, False, False])\n",
        "    selected_team = selected_team[['name','team','pos','cost','ownership','net_points','xm','fdr','base_points','gw1','gw2','gw3','gw4','gw5','gw6','starting_weeks']]\n",
        "\n",
        "    return selected_team, output\n",
        "\n",
        "# ========== RUN BUTTON ==========\n",
        "if st.sidebar.button(\"🚀 Run Model\"):\n",
        "    exclude_names_clean = [n.strip() for n in exclude_names_input if n.strip()]\n",
        "    exclude_teams_clean = [t.strip() for t in exclude_teams_input if t.strip()]\n",
        "    include_names_clean = [n.strip() for n in include_names_input if n.strip()]\n",
        "\n",
        "    with st.spinner(\"Optimising your squad... please wait ⏳\"):\n",
        "        final_team, raw_output = run_model(\n",
        "            fpl_id_input if fpl_id_input else None,\n",
        "            exclude_names_clean,\n",
        "            exclude_teams_clean,\n",
        "            include_names_clean,\n",
        "            budget_input\n",
        "    )\n",
        "\n",
        "\n",
        "    st.success(\"✅ Model run complete!\")\n",
        "\n",
        "    # Round all numeric columns\n",
        "    numeric_cols = final_team.select_dtypes(include=[np.number]).columns\n",
        "    final_team[numeric_cols] = final_team[numeric_cols].round(2)\n",
        "\n",
        "    # Define position color map\n",
        "    def highlight_pos(val):\n",
        "        color_map = {\n",
        "            \"GKP\": \"#FFD700\",\n",
        "            \"DEF\": \"#90EE90\",\n",
        "            \"MID\": \"#ADD8E6\",\n",
        "            \"FWD\": \"#FFB6C1\"\n",
        "        }\n",
        "        return f\"background-color: {color_map.get(val, 'white')}\"\n",
        "\n",
        "    # Create styled DataFrame with heatmap\n",
        "    styled_df = final_team.style.applymap(highlight_pos, subset=[\"pos\"]) \\\n",
        "                                .background_gradient(subset=numeric_cols, cmap=\"YlGnBu\")\n",
        "\n",
        "    # Round numbers for real and force display format\n",
        "    numeric_cols = final_team.select_dtypes(include=[np.number]).columns\n",
        "    final_team[numeric_cols] = final_team[numeric_cols].round(2)\n",
        "\n",
        "    styled_df = final_team.style.applymap(highlight_pos, subset=[\"pos\"]) \\\n",
        "                                .background_gradient(subset=numeric_cols, cmap=\"YlGnBu\") \\\n",
        "                                .format(precision=2)\n",
        "\n",
        "\n",
        "    # Tabs\n",
        "    tab1, tab2, tab3 = st.tabs([\"📋 Full Squad\", \"📊 Summary\", \"📄 Raw Output\"])\n",
        "\n",
        "    # Tab 1 — Full Squad (same as before)\n",
        "    with tab1:\n",
        "        st.dataframe(styled_df, use_container_width=True, height=800)\n",
        "        csv = final_team.to_csv(index=False)\n",
        "        st.download_button(\"⬇️ Download squad as CSV\", csv, \"squad.csv\", \"text/csv\")\n",
        "\n",
        "    # Tab 2 — Summary (same as before)\n",
        "    with tab2:\n",
        "        st.metric(\"💰 Total Cost\", f\"{final_team['cost'].sum():.1f}\")\n",
        "        st.metric(\"📈 Total Points\", f\"{final_team['net_points'].sum():.1f}\")\n",
        "\n",
        "    # Tab 3 — Raw Output\n",
        "    with tab3:\n",
        "        numeric_cols_raw = raw_output.select_dtypes(include=[np.number]).columns\n",
        "        raw_output[numeric_cols_raw] = raw_output[numeric_cols_raw].round(2)\n",
        "        st.dataframe(\n",
        "            raw_output.style.background_gradient(subset=numeric_cols_raw, cmap=\"YlGnBu\"),\n",
        "            use_container_width=True,\n",
        "            height=800\n",
        "        )\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "# Save Streamlit app\n",
        "with open(\"streamlit_app.py\", \"w\") as f:\n",
        "    f.write(streamlit_code)\n",
        "\n",
        "# Start Streamlit + ngrok tunnel\n",
        "import subprocess, time, sys, signal\n",
        "proc = subprocess.Popen([sys.executable, \"-m\", \"streamlit\", \"run\", \"streamlit_app.py\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n",
        "time.sleep(4)\n",
        "public_url = ngrok.connect(8501)\n",
        "print(\"🌍 Your Streamlit app is live here:\", public_url)\n",
        "print(\"If it doesn't load immediately, wait ~10s and refresh.\")\n",
        "\n",
        "# Keep alive\n",
        "try:\n",
        "    while True:\n",
        "        time.sleep(1)\n",
        "except KeyboardInterrupt:\n",
        "    proc.send_signal(signal.SIGINT)\n",
        "\n",
        "# ✅ NOTE: You must replace the `pass` in run_model() with your actual optimiser code from your working script.\n",
        "\n"
      ],
      "metadata": {
        "id": "Nbk0iGNWDhKi"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}