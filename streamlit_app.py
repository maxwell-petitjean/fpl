# -*- coding: utf-8 -*-
"""placeholder.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Gddr_k7GEbe1mZ3eit5cdktHxiOuZSN
"""

import streamlit as st
import pandas as pd
import numpy as np
import requests
import pulp

# ================== CONFIG ==================
GITHUB_BASE = "https://raw.githubusercontent.com/maxwell-petitjean/fpl/refs/heads/main/"
VAR_GW = 1
VAR_REL1, VAR_REL2, VAR_REL3 = 'IPS', 'LEI', 'SOU'
VAR_PRO1, VAR_PRO2, VAR_PRO3 = 'BUR', 'LEE', 'SUN'
URL1 = 'https://fantasy.premierleague.com/api/bootstrap-static/'
URL2 = 'https://fantasy.premierleague.com/api/fixtures?future=1'

# ================== STREAMLIT PAGE CONFIG ==================
st.set_page_config(page_title="FPL Optimiser", layout="wide")
st.title("‚öΩ FPL Optimiser")
st.subheader("***CURRENTLY ANALYSING GW"+VAR_GW+" DATA***")
st.caption("***Will be back up and running before GW2"+(VAR_GW+1)+"***")

# ================== MARKDOWN ================================
st.markdown("""
<style>
div.stElementContainer {
    width: 100%;
}
div.stButton {
    width: 100%;
}
div.stButton > button:first-child {
    background: linear-gradient(90deg, #4CAF50, #45a049);
    color: white;
    padding: 0.6em 2em;
    border-radius: 10px;
    border: none;
    width: 100%;
    font-size: 18px;
    font-weight: bold;
    transition: all 0.3s ease;
}
div.stButton > button:first-child:hover {
    background: linear-gradient(90deg, #45a049, #4CAF50);
    transform: scale(1.05);
}
</style>
""", unsafe_allow_html=True)

# ================== INPUT FORM LOGIC ==================
def get_inputs():
    fpl_id = st.text_input("FPL ID",value="Back up-and-running very soon")
    exclude_names = st.text_area(
        "Exclude Names (comma separated)",
        value="Back up-and-running very soon"
    ).split(",")
    exclude_teams = st.text_area(
        "Exclude Teams (comma separated)",
        value="Back up-and-running very soon"
    ).split(",")
    include_names = st.text_area(
        "Include Names (comma separated)",value="Back up-and-running very soon"
    ).split(",")
    budget = st.number_input("Budget", value=1000, step=1)
    return fpl_id, exclude_names, exclude_teams, include_names, budget

# ================== INPUT PARAMETERS ==================
with st.expander("‚öôÔ∏è Input Parameters", expanded=True):
    fpl_id_input, exclude_names_input, exclude_teams_input, include_names_input, budget_input = get_inputs()

# ================== HELPERS ==================
@st.cache_data
def load_csv(filename):
    url = GITHUB_BASE + filename
    return pd.read_csv(url)

# ================== MODEL PLACEHOLDER ==================
def run_model(fpl_id, exclude_names, exclude_teams, include_names, budget):
    # Placeholder ‚Äî replace with optimiser code
    output = pd.DataFrame({
        "name": ["Player A", "Player B", "Player C"],
        "pos": ["MID", "FWD", "DEF"],
        "cost": [5.5, 6.0, 4.5],
        "net_points": [50.12, 60.57, 40.99]
    })
    selected_team = pd.DataFrame({
        "name": ["Player X", "Player Y", "Player Z"],
        "pos": ["DEF", "MID", "FWD"],
        "cost": [5.0, 6.5, 7.0],
        "net_points": [55.23, 65.79, 70.11]
    })
    return selected_team, output

# ================== RUN BUTTON ==================
if st.button("üöÄ Run Model - Test Data for now"):
    exclude_names_clean = [n.strip() for n in exclude_names_input if n.strip()]
    exclude_teams_clean = [t.strip() for t in exclude_teams_input if t.strip()]
    include_names_clean = [n.strip() for n in include_names_input if n.strip()]

    with st.spinner("Optimising your squad... please wait ‚è≥"):
        final_team, raw_output = run_model(
            fpl_id_input if fpl_id_input else None,
            exclude_names_clean,
            exclude_teams_clean,
            include_names_clean,
            budget_input
        )

    st.success("‚úÖ Model run complete!")

    # Round numeric values
    for df in [final_team, raw_output]:
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        df[numeric_cols] = df[numeric_cols].round(2)

    # Save to session state
    st.session_state.final_team = final_team
    st.session_state.raw_output = raw_output

# ======= If model has results, show tabs =======
if st.session_state.final_team is not None and st.session_state.raw_output is not None:

    # ======= Position color map =======
    def highlight_pos(val):
        color_map = {
            "GKP": "#FFD700",
            "DEF": "#90EE90",
            "MID": "#ADD8E6",
            "FWD": "#FFB6C1"
        }
        return f"background-color: {color_map.get(val, 'white')}"

    tab1, tab2, tab3 = st.tabs(["üìã Full Squad", "üìä Summary", "üìÑ Research Players"])

    # --- Tab 1 ‚Äî Final Squad
    with tab1:
        numeric_cols = st.session_state.final_team.select_dtypes(include=[np.number]).columns
        styled_df = st.session_state.final_team.style.applymap(highlight_pos, subset=["pos"]) \
                                                    .background_gradient(subset=numeric_cols, cmap="YlGnBu") \
                                                    .format(precision=2)
        st.dataframe(styled_df, use_container_width=True, height=800)
        csv = st.session_state.final_team.to_csv(index=False)
        st.download_button("‚¨áÔ∏è Download squad as CSV", csv, "squad.csv", "text/csv")

    # --- Tab 2 ‚Äî Summary
    with tab2:
        st.metric("üí∞ Total Cost", f"{st.session_state.final_team['cost'].sum():.2f}")
        st.metric("üìà Total Points", f"{st.session_state.final_team['net_points'].sum():.2f}")

    # --- Tab 3 ‚Äî Raw Output with Position Filter ---
    with tab3:
        raw_output = st.session_state.raw_output.sort_values(by="net_points", ascending=False)

        positions = raw_output['pos'].unique().tolist()
        pos_filter = st.multiselect("Filter by position", options=positions, default=positions)
        filtered_df = raw_output[raw_output['pos'].isin(pos_filter)]

        numeric_cols_raw = filtered_df.select_dtypes(include=[np.number]).columns
        styled_raw = filtered_df.style.background_gradient(subset=numeric_cols_raw, cmap="YlGnBu") \
                                        .format(precision=2)
        st.dataframe(styled_raw, use_container_width=True, height=800)