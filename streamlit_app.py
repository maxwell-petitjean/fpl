# -*- coding: utf-8 -*-
"""streamlit_app17_gw2.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nq0IaR6jCXxyxsnwpjKE2mBGq6Vyh8Zo
"""

import streamlit as st
import pandas as pd
import numpy as np
import requests
import pulp

# ============= CONFIG =============
GITHUB_BASE = "https://raw.githubusercontent.com/maxwell-petitjean/fpl/refs/heads/main/"
VAR_GW = 2
VAR_GW0,VAR_GW1,VAR_GW2,VAR_GW3,VAR_GW4 = VAR_GW-1,VAR_GW-2,VAR_GW-3,VAR_GW-4,VAR_GW-5
VAR_GW5,VAR_GW6,VAR_GW7,VAR_GW8,VAR_GW9 = VAR_GW-6,VAR_GW-7,VAR_GW-8,VAR_GW-9,VAR_GW-10
VAR_GW_LY = 38-(10-VAR_GW)
VAR_REL1, VAR_REL2, VAR_REL3 = 'IPS', 'LEI', 'SOU'
VAR_PRO1, VAR_PRO2, VAR_PRO3 = 'BUR', 'LEE', 'SUN'
URL1 = 'https://fantasy.premierleague.com/api/bootstrap-static/'
URL2 = 'https://fantasy.premierleague.com/api/fixtures?future=1'

URL30 = 'https://fantasy.premierleague.com/api/event/'+str(VAR_GW0)+'/live/'
URL31 = 'https://fantasy.premierleague.com/api/event/'+str(VAR_GW1)+'/live/'
URL32 = 'https://fantasy.premierleague.com/api/event/'+str(VAR_GW2)+'/live/'
URL33 = 'https://fantasy.premierleague.com/api/event/'+str(VAR_GW3)+'/live/'
URL34 = 'https://fantasy.premierleague.com/api/event/'+str(VAR_GW4)+'/live/'
URL35 = 'https://fantasy.premierleague.com/api/event/'+str(VAR_GW5)+'/live/'
URL36 = 'https://fantasy.premierleague.com/api/event/'+str(VAR_GW6)+'/live/'
URL37 = 'https://fantasy.premierleague.com/api/event/'+str(VAR_GW7)+'/live/'
URL38 = 'https://fantasy.premierleague.com/api/event/'+str(VAR_GW8)+'/live/'
URL39 = 'https://fantasy.premierleague.com/api/event/'+str(VAR_GW9)+'/live/'

# ================== STREAMLIT PAGE CONFIG ==================
st.set_page_config(page_title="FPL Optimiser", layout="wide")
st.title("⚽ Free FPL Optimiser")
st.subheader("Optimise your Fantasy Premier League team")
st.caption("Hit 'Run Model' to get started.")

# ================== MARKDOWN ================================
st.markdown("""
<style>
div.stElementContainer {
    width: 100%;
}
div.stButton {
    width: 100%;
}
div.stButton > button:first-child {
    background: linear-gradient(90deg, #4CAF50, #45a049);
    color: white;
    padding: 0.6em 2em;
    border-radius: 10px;
    border: none;
    width: 100%;
    font-size: 18px;
    font-weight: bold;
    transition: all 0.3s ease;
}
div.stButton > button:first-child:hover {
    background: linear-gradient(90deg, #45a049, #4CAF50);
    transform: scale(1.05);
}
</style>
""", unsafe_allow_html=True)

# ================== INPUT FORM LOGIC ==================
def get_inputs():
    fpl_id = st.text_input("FPL ID (enter here to pull through your team data?)")
    transfers = st.number_input("How many transfers to make? Set as 1 or more",value=1)
    exclude_names = st.text_area(
        "Exclude Names (comma separated)",
        value="Rayan Aït-Nouri, Bryan Mbeumo"
    ).split(",")
    exclude_teams = st.text_area(
        "Exclude Teams (comma separated)",
        value="BRE"
    ).split(",")
    include_names = st.text_area(
        "Include Names (comma separated)"
    ).split(",")
    budget = st.number_input("Budget", value=1000, step=1)
    return fpl_id, transfers, exclude_names, exclude_teams, include_names, budget

# ================== INPUT PARAMETERS ==================
with st.expander("⚙️ Input Parameters", expanded=True):
    fpl_id_input, transfers_input, exclude_names_input, exclude_teams_input, include_names_input, budget_input = get_inputs()

# ============= HELPERS =============
def load_csv(filename):
    url = GITHUB_BASE + filename
    try:
        return pd.read_csv(url, encoding="utf-8")
    except UnicodeDecodeError:
        return pd.read_csv(url, encoding="latin1")

# ============= MODEL FUNCTION =============
def run_model(fpl_id, transfers, exclude_names, exclude_teams, include_names, budget):
    # ---- Load API data ----
    json1 = requests.get(URL1).json()
    json2 = requests.get(URL2).json()

    #turn to json
    json30 = requests.get(URL30).json()
    # json31 = requests.get(URL31).json()
    # json32 = requests.get(URL32).json()
    # json33 = requests.get(URL33).json()
    # json34 = requests.get(URL34).json()
    # json35 = requests.get(URL35).json()
    # json36 = requests.get(URL36).json()
    # json37 = requests.get(URL37).json()
    # json38 = requests.get(URL38).json()
    # json39 = requests.get(URL39).json()

    #turn to df
    gw_df0 = pd.DataFrame(json30)
    # gw_df1 = pd.DataFrame(json31)
    # gw_df2 = pd.DataFrame(json32)
    # gw_df3 = pd.DataFrame(json33)
    # gw_df4 = pd.DataFrame(json34)
    # gw_df5 = pd.DataFrame(json35)
    # gw_df6 = pd.DataFrame(json36)
    # gw_df7 = pd.DataFrame(json37)
    # gw_df8 = pd.DataFrame(json38)
    # gw_df9 = pd.DataFrame(json39)

    gw_df = gw_df0.copy()
    # gw_df = pd.concat([gw_df0,gw_df1])
    # gw_df = pd.concat([gw_df0,gw_df1,gw_df2,gw_df3,gw_df4,gw_df5,gw_df6,gw_df7,gw_df8,gw_df9])

    # ---- Load CSVs from GitHub ----
    players_prev0 = load_csv("players_24.csv")
    fixtures_prev0 = load_csv("gws_24.csv")
    teams3 = load_csv("teams_24.csv")
    xm_manual = load_csv("xm_manual.csv")

    # ------------------------------------------------------------------------------------------

    # ---- TEAMS data ----
    teams = pd.DataFrame(json1['teams'])[['id','name','short_name','strength_attack_home','strength_defence_home','strength_attack_away','strength_defence_away']]
    teams.columns = ['team_id','team_name','team_code','str_o_h','str_d_h','str_o_a','str_d_a']

    # ---- POSITIONS data ----
    positions = pd.DataFrame(json1['element_types'])[['id','singular_name_short']]
    positions.columns = ['id','pos']

    # ------------------------------------------------------------------------------------------

    # ---- Players - Previous Seasons ----
    players_prev1 = players_prev0[['first_name','second_name','element_type','total_points','minutes']]
    players_prev1['name'] = players_prev1['first_name']+' '+players_prev1['second_name']
    players_prev2 = players_prev1[['name','minutes','total_points']]
    players_prev3 = players_prev2.copy()
    players_prev3.columns = ['name','minutes','points']
    players_prev5 = players_prev3.copy()
    players_prev5['pp90'] = players_prev5['points'] / (players_prev5['minutes']/90)
    players_prev6 = players_prev5.fillna(0)
    players_prev6['pp90'] = round(players_prev6['pp90'],2).clip(upper=10)
    players_prev7 = players_prev6.sort_values('points',ascending=False)

    # ------------------------------------------------------------------------------------------

    # ---- FORM -- THIS SEASON
    players = pd.DataFrame(json1['elements'])
    players1 = players[['id','first_name','second_name','team','element_type','now_cost','selected_by_percent','clearances_blocks_interceptions','recoveries','tackles','clean_sheets','expected_assists','expected_goals','total_points','minutes']]
    players2 = players1.merge(teams[['team_id', 'team_code']], left_on='team', right_on='team_id').merge(positions[['id', 'pos']], left_on='element_type', right_on='id')
    players3 = players2.copy()
    players3['name'] = players3['first_name']+' '+players3['second_name']
    players3['cbrit'] = players3['clearances_blocks_interceptions']+players3['recoveries']+players3['tackles']
    players4 = players3[['id_x','name','team_code','pos','now_cost','selected_by_percent','cbrit','clean_sheets','expected_assists','expected_goals','total_points','minutes']]
    players4.columns = ['id','name','team','pos','cost','ownership','dc','cs','xa','xg','points','mins']

    # ------------------------------------------------------------------------------------------
    # ---- FORM -- LAST 10 (THIS YEAR)
    form0 = pd.json_normalize(gw_df['elements'])
    form1 = form0[['id','stats.defensive_contribution','stats.clean_sheets','stats.expected_assists','stats.expected_goals','stats.total_points','stats.minutes']]
    form1.columns = ['id_form','dc_form','cs_form','xa_form','xg_form','points_form','mins_form']
    form2 = form1.merge(players4[['id', 'name']], left_on='id_form', right_on='id')
    form3 = form2[['name','dc_form','cs_form','xa_form','xg_form','points_form','mins_form']]
    form3.columns = ['name_form','dc_form','cs_form','xa_form','xg_form','points_form','mins_form']

    # ---- FORM -- LAST 10 (LAST YEAR)
    fixtures_prev1 = fixtures_prev0.drop(fixtures_prev0[fixtures_prev0['GW']< VAR_GW_LY].index)
    fixtures_prev2 = fixtures_prev1[fixtures_prev1['position'] != 'AM']
    fixtures_prev3 = fixtures_prev2[['name','cbrit','clean_sheets','expected_assists','expected_goals','total_points','minutes']]
    fixtures_prev3.columns = ['name_form','dc_form','cs_form','xa_form','xg_form','points_form','mins_form']
    fixtures_prev3['dc_form'] = (fixtures_prev3['mins_form'] / 90 ) * 5

    # ---- FORM -- CONCATENATE LAST 10
    form4 = pd.concat([form3,fixtures_prev3])
    form4['xa_form'] = form4['xa_form'].astype(float).astype('int64')
    form4['xg_form'] = form4['xg_form'].astype(float).astype('int64')

    form40 = form4.merge(players4[['name','pos']], left_on='name_form', right_on='name')

    # ---- FORM -- CLEAN DATA
    form5 = pd.pivot_table(form40, values=['dc_form','cs_form','xa_form','xg_form','points_form','mins_form'], index=['name_form','pos'], aggfunc=[np.sum], fill_value=0)
    form6 = form5.reset_index()
    form6.columns = form6.columns.droplevel(0)
    form6.columns = ['name_form','pos_form','cs_form','dc_form','mins_form','points_form','xa_form','xg_form']

    form7 = form6.copy()
    form7['xm_form'] = round(form7['mins_form']/10,2)
    form8 = form7.copy()
    form8['pp90_form'] = round(form8['points_form'] / (form8['mins_form']/90),2)
    form9 = form8.copy()
    form9['csp_form'] = round((form9['cs_form']*4),2)
    form9['cspp90_form'] = round(form9['csp_form'] / (form9['mins_form']/90),2)
    form10 = form9.copy()
    form10['xap_form'] = form10['xa_form']*3
    form10['xgp_form'] = np.where((form10['pos_form'] == 'FWD'), form10['xg_form'] * 4,
                            np.where((form10['pos_form'] == 'MID'), form10['xg_form'] * 5,
                            np.where((form10['pos_form'] == 'DEF') | (form10['pos_form'] == 'GKP'), form10['xg_form'] * 6,0 )))
    form10['xop_form'] = form10['xap_form']+form10['xgp_form']
    form11 = form10.copy()
    form11['xopp90_form'] = round((form11['xop_form']) / (form11['mins_form']/90),2)
    form12 = form11.copy()
    form12['dcp_form'] = np.where((form12['pos_form'] == 'MID'), form12['dc_form'] / 6,
                            np.where((form12['pos_form'] == 'DEF'), form12['dc_form'] / 5,0 ))
    form12['dcp_form'] = round(form12['dcp_form'],2)
    form12['dcpp90_form'] = round((form12['dcp_form']) / (form12['mins_form']/90),2).clip(upper=2)
    form12['pred_pp90_form'] = form12['xopp90_form']+form12['cspp90_form']+form12['dcpp90_form']+2
    form12 = form12.fillna(0)

    # ------------------------------------------------------------------------------------------

    # ---- Merge player stats ----
    players_prev8 = players_prev7.copy()
    players_prev8.columns = ['name_ly','mins_ly','points_ly','pp90_ly']
    form13 = form12.copy()
    players5 = players4.merge(players_prev8, how="left", left_on='name', right_on='name_ly').merge(form13, how="left", left_on='name', right_on='name_form')

    # ------------------------------------------------------------------------------------------

    # ---- Build fixture difficulty ----
    team_gw_prev1 = fixtures_prev1[['GW','position','team','opponent_team','was_home','total_points','minutes']]
    team_gw_prev1['played60'] = np.where((team_gw_prev1['minutes'] > 60),1,0)
    team_gw_prev2 = team_gw_prev1.drop(team_gw_prev1[team_gw_prev1['played60'] == 0].index)
    team_gw_prev2['pos'] = np.where((team_gw_prev2['position'] == 'MID')|(team_gw_prev2['position'] == 'FWD'),'ATT', team_gw_prev2['position'])
    team_gw_prev3 = pd.pivot_table(team_gw_prev2, values=['total_points','played60'], index=['opponent_team','was_home','pos'], aggfunc=[np.sum], fill_value=0)
    team_gw_prev3 = team_gw_prev3.reset_index()
    team_gw_prev3.columns = team_gw_prev3.columns.droplevel(0)
    team_gw_prev3.columns = ['team','home','pos','players','points']
    team_gw_prev4 = team_gw_prev3.copy()
    team_gw_prev4['ppg'] = team_gw_prev4['points'] / team_gw_prev4['players']
    team_gw_prev5 = team_gw_prev4.copy()
    team_gw_prev5['ppgh'] = np.where((team_gw_prev5['home'] == True),team_gw_prev5['ppg'],0)
    team_gw_prev5['ppga'] = np.where((team_gw_prev5['home'] == False),team_gw_prev5['ppg'],0)
    team_gw_prev6 = pd.pivot_table(team_gw_prev5, values=['ppgh','ppga'], index=['team','pos'], aggfunc=[np.sum], fill_value=0).reset_index()
    team_gw_prev6.columns = team_gw_prev6.columns.droplevel(0)
    team_gw_prev6.columns = ['team','pos','ppgh','ppga']
    team_gw_prev7 = team_gw_prev6.merge(teams3[['id', 'short_name']], left_on='team', right_on='id')
    team_gw_prev8 = team_gw_prev7[['short_name','pos','ppgh','ppga']]
    team_gw_prev8.columns = ['team_code','pos','ppgh','ppga']
    team_gw_prev8['team_new'] = np.where(team_gw_prev8['team_code'] == VAR_REL1, VAR_PRO1,
                                  np.where(team_gw_prev8['team_code'] == VAR_REL2, VAR_PRO2,
                                  np.where(team_gw_prev8['team_code'] == VAR_REL3, VAR_PRO3, team_gw_prev8['team_code'])))
    team_gw_prev9 = team_gw_prev8.merge(teams[['team_code','team_id']], left_on='team_new', right_on='team_code')

    # ------------------------------------------------------------------------------------------

    # ---- Upcoming fixtures ----
    fixtures = pd.DataFrame(json2)[['event','team_h','team_a']]
    fixtures2 = fixtures.drop(fixtures[fixtures['event'] > (VAR_GW + 5)].index)
    fixtures2 = fixtures2.drop(fixtures2[fixtures2['event'] < VAR_GW].index)
    fixtures_h1 = fixtures2.pivot(index='team_h', columns='event', values='team_a').reset_index().fillna(0).astype(int)
    fixtures_a1 = fixtures2.pivot(index='team_a', columns='event', values='team_h').reset_index().fillna(0).astype(int)
    fixtures_h1.columns = ['team_h','a1','a2','a3','a4','a5','a6']
    fixtures_a1.columns = ['team_a','h1','h2','h3','h4','h5','h6']

    lookup_team1 = dict(zip(teams[['team_id','team_code']].team_id, teams[['team_id','team_code']].team_code))
    fixtures_h4 = fixtures_h1.replace(lookup_team1)
    fixtures_a4 = fixtures_a1.replace(lookup_team1)

    # ------------------------------------------------------------------------------------------

    # ---- Merge fixtures into players ----
    fix_att1 = team_gw_prev9[team_gw_prev9['pos'] == 'ATT']
    fix_def1 = team_gw_prev9[team_gw_prev9['pos'] == 'DEF']
    fix_gk1 = team_gw_prev9[team_gw_prev9['pos'] == 'GK']

    lookup_home_att = dict(zip(fix_att1['team_new'], fix_att1['ppgh']))
    lookup_home_def = dict(zip(fix_def1['team_new'], fix_def1['ppgh']))
    lookup_home_gk = dict(zip(fix_gk1['team_new'], fix_gk1['ppgh']))
    lookup_away_att = dict(zip(fix_att1['team_new'], fix_att1['ppga']))
    lookup_away_def = dict(zip(fix_def1['team_new'], fix_def1['ppga']))
    lookup_away_gk = dict(zip(fix_gk1['team_new'], fix_gk1['ppga']))

    # turn home fixtures into future points
    fixtures_home_att = fixtures_h4.copy()
    fixtures_home_def = fixtures_h4.copy()
    fixtures_home_gk = fixtures_h4.copy()

    cols_to_replace1 = fixtures_home_att.columns[1:]
    cols_to_replace2 = fixtures_home_def.columns[1:]
    cols_to_replace3 = fixtures_home_gk.columns[1:]

    fixtures_home_att[cols_to_replace1] = fixtures_home_att[cols_to_replace1].replace(lookup_away_att)
    fixtures_home_def[cols_to_replace2] = fixtures_home_def[cols_to_replace2].replace(lookup_away_def)
    fixtures_home_gk[cols_to_replace3] = fixtures_home_gk[cols_to_replace3].replace(lookup_away_gk)

    # turn away fixtures into future points
    fixtures_away_att = fixtures_a4.copy()
    fixtures_away_def = fixtures_a4.copy()
    fixtures_away_gk = fixtures_a4.copy()

    cols_to_replace4 = fixtures_away_att.columns[1:]
    cols_to_replace5 = fixtures_away_def.columns[1:]
    cols_to_replace6 = fixtures_away_gk.columns[1:]

    fixtures_away_att[cols_to_replace4] = fixtures_away_att[cols_to_replace4].replace(lookup_home_att)
    fixtures_away_def[cols_to_replace5] = fixtures_away_def[cols_to_replace5].replace(lookup_home_def)
    fixtures_away_gk[cols_to_replace6] = fixtures_away_gk[cols_to_replace6].replace(lookup_home_gk)

    new_cols = ['team','op1','op2','op3','op4','op5','op6']
    for df in [fixtures_home_att,fixtures_home_def,fixtures_home_gk,fixtures_away_att,fixtures_away_def,fixtures_away_gk]:
        df.columns = new_cols

    # ------------------------------------------------------------------------------------------

    fixtures_att = pd.concat([fixtures_home_att,fixtures_away_att])
    fixtures_def = pd.concat([fixtures_home_def,fixtures_away_def])
    fixtures_gk = pd.concat([fixtures_home_gk,fixtures_away_gk])

    fixtures_att1 = fixtures_att.groupby('team', as_index=False).sum()
    fixtures_def1 = fixtures_def.groupby('team', as_index=False).sum()
    fixtures_gk1 = fixtures_gk.groupby('team', as_index=False).sum()

    fixtures_att1['fdr'] = fixtures_att1.iloc[:,1:].sum(axis=1)
    fixtures_def1['fdr'] = fixtures_def1.iloc[:,1:].sum(axis=1)
    fixtures_gk1['fdr'] = fixtures_gk1.iloc[:,1:].sum(axis=1)

    gkp_df = players5[players5['pos'] == 'GKP'].merge(fixtures_gk1, on='team', how='left')
    def_df = players5[players5['pos'] == 'DEF'].merge(fixtures_def1, on='team', how='left')
    att_df = players5[~players5['pos'].isin(['GKP', 'DEF'])].merge(fixtures_att1, on='team', how='left')
    players6 = pd.concat([gkp_df, def_df, att_df], ignore_index=True).sort_values(by='cost', ascending=False).reset_index(drop=True)

    # ------------------------------------------------------------------------------------------

    # ---- Add extra player data ----
    players7 = players6.copy()
    player_data = players[['first_name','second_name','ep_next','chance_of_playing_next_round']]
    player_data['name'] = player_data['first_name']+' '+player_data['second_name']
    player_data = player_data.drop(columns=['first_name', 'second_name'])
    player_data = player_data[['name','ep_next','chance_of_playing_next_round']]
    player_data.columns = ['name_fpl','ep_fpl','flag_fpl']
    players8 = players7.merge(player_data,left_on='name',right_on='name_fpl',how='left')

    #xmins
    players8 = players8.merge(xm_manual,left_on='name',right_on='xm_name',how='left')
    players8['xm_ty'] = players8['mins']/VAR_GW0
    players8['xm_ly'] = (players8['mins_ly']/38).clip(lower=40).fillna(0)
    players8['xm_max'] = np.where(players8['flag_fpl'].isna(), players8['xm_form'], players8['xm_form'] * (players8['flag_fpl']/100) )
    players8['xm'] = round((players8['xm_max'] + players8['xm_ty']) / 2 ,2)
    players8['xm'] = np.where(players8['xm_manual'].isna(), players8['xm'], players8['xm_manual'])

    #get predicted points
    players9 = players8.copy()
    players9 = players9.fillna(0)
    players9['ep_fpl'] = pd.to_numeric(players9['ep_fpl'], errors='coerce')
    players9['mean_value'] = round( players9[['pred_pp90_form','pp90_ly','ep_fpl']].mean(axis=1) ,2)
    players9['mean_value'] = np.where( players9['pp90_ly']==0, players9[['pred_pp90_form','ep_fpl']].mean(axis=1) , players9['mean_value'] )
    players9['base_points'] = round( (players9['mean_value']/90) * players9['xm'] ,2)
    players9['bp_copy'] = players9['base_points']

    for w in ['gw1','gw2','gw3','gw4','gw5','gw6']:
        players9[w] = round(players9[[f'op{w[-1]}','base_points','bp_copy']].mean(axis=1),2)
    players9['predicted_points'] = players9[[f'gw{i}' for i in range(1,7)]].sum(axis=1)
    #players9['net_points'] = np.where(players9['xm'].isna() , 0 , players9['net_points'] )
    players9[['op1','op2','op3','op4','op5','op6','fdr']] = players9[['op1','op2','op3','op4','op5','op6','fdr']].round(2)

    players10 = players9.sort_values(by='points', ascending=False)
    players10 = players10[np.isfinite(players10['predicted_points'])]

    final_pos = positions[['pos','id']]
    final_pos.columns = ['pos_code','pos_id']
    players10 = players10.merge(final_pos,left_on='pos',right_on='pos_code',how='left')
    player_output = players10[['name','team','pos','ownership','points','mins','xm','points_ly','pp90_ly','xg','xa','cs','dc','predicted_points','base_points','mean_value','pred_pp90_form','pp90_ly','ep_fpl']]

    player_output['xg'] = pd.to_numeric(player_output['xg'], errors='coerce')
    player_output['xa'] = pd.to_numeric(player_output['xa'], errors='coerce')

    player_output['xg_p90'] = ( player_output['xg'] / ( player_output['mins'] / 90 ) ).round(2)
    player_output['xa_p90'] = ( player_output['xa'] / ( player_output['mins'] / 90 ) ).round(2)
    player_output['cs_p90'] = ( player_output['cs'] / ( player_output['mins'] / 90 ) ).round(2)
    player_output['dc_p90'] = ( player_output['dc'] / ( player_output['mins'] / 90 ) ).round(2)

    player_output = player_output[['name','team','pos','ownership','points','mins','xm','points_ly','xg','xg_p90','xa','xa_p90','cs','cs_p90','dc','dc_p90','predicted_points','mean_value','xm','base_points','pred_pp90_form','pp90_ly','ep_fpl']]

    output = players10[['name','team','pos','pos_id','cost','ownership','predicted_points','xm','fdr','gw1','gw2','gw3','gw4','gw5','gw6']]
    output = output.sort_values(by='predicted_points', ascending=False)

    # ---- FPL ID Squad Fetch ----
    current_names = []
    if fpl_id:
        picks_url = f"https://fantasy.premierleague.com/api/entry/{fpl_id}/event/{VAR_GW0}/picks/"
        picks_data = requests.get(picks_url).json()
        player_ids = [p['element'] for p in picks_data['picks']]

        # Pull all players
        players_data = requests.get(URL1).json()['elements']

        # Map ID → full name (first + second name)
        id_to_name = {p['id']: f"{p['first_name']} {p['second_name']}" for p in players_data}

        # Translate picks to names consistent with your DataFrame
        current_names = [id_to_name[pid] for pid in player_ids if pid in id_to_name]

    # ---- LP Optimisation ----
    prob = pulp.LpProblem("FPL_Team_Selection", pulp.LpMaximize)

    # decision vars
    player_vars = pulp.LpVariable.dicts("Player", output.index, 0, 1, pulp.LpBinary)
    weeks = ["gw1","gw2","gw3","gw4","gw5","gw6"]
    week_vars = {w: pulp.LpVariable.dicts(f"Week_{w}", output.index, 0, 1, pulp.LpBinary) for w in weeks}

    # ---- Squad constraints ----
    # Total squad size
    prob += pulp.lpSum(player_vars[i] for i in output.index) == 15

    # Positional quotas
    prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, 'pos'] == 'GKP') == 2
    prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, 'pos'] == 'DEF') == 5
    prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, 'pos'] == 'MID') == 5
    prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, 'pos'] == 'FWD') == 3

    # Budget
    prob += pulp.lpSum(output.loc[i, 'cost'] * player_vars[i] for i in output.index) <= budget

    # Max 3 players per team
    for team in output['team'].unique():
        prob += pulp.lpSum(player_vars[i] for i in output.index if output.loc[i, 'team'] == team) <= 3

    # --- Exclusions (hard)
    for i in output.index:
        if (output.loc[i,'name'] in exclude_names) or (output.loc[i,'team'] in exclude_teams):
            prob += player_vars[i] == 0

    # --- MUST INCLUDE (use your include_names list as hard locks)
    must_include_set = set(n.strip() for n in include_names if n.strip())
    for i in output.index:
        if output.loc[i,'name'] in must_include_set:
            prob += player_vars[i] == 1

    # --- HARD TRANSFER LIMIT relative to your current team
    # Only consider current players that are present in the candidate pool `output`
    current_idx = [i for i in output.index if output.loc[i,'name'] in set(current_names)]
    kept_target = max(0, len(current_idx) - transfers)   # exactly this many current players must remain
    prob += pulp.lpSum(player_vars[i] for i in current_idx) == kept_target

    # --- Weekly starting XI (link & formation)
    for w in weeks:
        for i in output.index:
            prob += week_vars[w][i] <= player_vars[i]           # starter must be in squad
        prob += pulp.lpSum(week_vars[w][i] for i in output.index) == 11
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i,'pos']=='GKP') == 1
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i,'pos']=='DEF') >= 3
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i,'pos']=='DEF') <= 5
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i,'pos']=='MID') >= 2
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i,'pos']=='MID') <= 5
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i,'pos']=='FWD') >= 1
        prob += pulp.lpSum(week_vars[w][i] for i in output.index if output.loc[i,'pos']=='FWD') <= 3

    # --- Objective: starters only
    prob += pulp.lpSum(output.loc[i, w] * week_vars[w][i] for w in weeks for i in output.index)

    # Solve
    _ = prob.solve(pulp.PULP_CBC_CMD(msg=False))

    selected_team = output[[player_vars[i].value() == 1 for i in output.index]].copy()
    selected_team['starting_weeks'] = selected_team.index.map(lambda i: ', '.join([w for w in weeks if week_vars[w][i].value() == 1]))
    selected_team = selected_team.sort_values(by=['pos_id', 'cost', 'predicted_points'], ascending=[True, False, False])
    selected_team = selected_team[['name','team','pos','cost','ownership','predicted_points','xm','fdr','gw1','gw2','gw3','gw4','gw5','gw6','starting_weeks']]

    return selected_team, output, player_output, fixtures_att1, fixtures_def1

# ===== SESSION STATE SETUP =====
if "final_team" not in st.session_state:
    st.session_state.final_team = None
if "raw_output" not in st.session_state:
    st.session_state.raw_output = None
if "player_output" not in st.session_state:
    st.session_state.player_output = None
if "fdr_att" not in st.session_state:
    st.session_state.fdr_att = None
if "fdr_def" not in st.session_state:
    st.session_state.fdr_def = None

# ================== RUN BUTTON ==================
if st.button("🚀 Run Model"):
    exclude_names_clean = [n.strip() for n in exclude_names_input if n.strip()]
    exclude_teams_clean = [t.strip() for t in exclude_teams_input if t.strip()]
    include_names_clean = [n.strip() for n in include_names_input if n.strip()]

    with st.spinner("Optimising your squad... please wait ⏳"):
        final_team, raw_output, player_output, fdr_att, fdr_def = run_model(
            fpl_id_input if fpl_id_input else None,
            transfers_input if transfers_input else 1,
            exclude_names_clean,
            exclude_teams_clean,
            include_names_clean,
            budget_input
        )

    st.success("✅ Model run complete!")

    # Save to session state
    st.session_state.final_team = final_team
    st.session_state.raw_output = raw_output
    st.session_state.player_output = player_output
    st.session_state.fdr_att = fdr_att
    st.session_state.fdr_def = fdr_def

# ======= If model has results, show tabs =======
if st.session_state.final_team is not None and st.session_state.raw_output is not None:

    # ======= Position color map =======
    def highlight_pos(val):
        color_map = {
            "GKP": "#FFD700",
            "DEF": "#90EE90",
            "MID": "#ADD8E6",
            "FWD": "#FFB6C1"
        }
        return f"background-color: {color_map.get(val, 'white')}"

    tab1, tab2, tab3, tab4 = st.tabs(["📋 Full Squad","📊 Summary","📄 Research Players","📅 Fixture Difficulty"])

    # --- Tab 1 — Final Squad
    with tab1:
        numeric_cols1 = st.session_state.final_team.select_dtypes(include=[np.number]).columns
        styled_df = st.session_state.final_team.style.applymap(highlight_pos, subset=["pos"]) \
                                                    .background_gradient(subset=numeric_cols1, cmap="YlGnBu") \
                                                    .format(precision=2)
        st.dataframe(styled_df, use_container_width=True, height=600)
        csv = st.session_state.final_team.to_csv(index=False)
        st.download_button("⬇️ Download squad as CSV", csv, "squad.csv", "text/csv")

    # --- Tab 2 — Summary
    with tab2:
        st.metric("💰 Total Cost", f"{st.session_state.final_team['cost'].sum():.2f}")
        st.metric("📈 Total Points", f"{st.session_state.final_team['predicted_points'].sum():.2f}")
        st.markdown("---")

        ft = final_team.copy()

        # ===== Captain Ranking (Top 3 by gw1) =====
        st.subheader("🧢 Captain Ranking (Next GW)")
        if "gw1" in ft.columns and "name" in ft.columns:
            top3 = ft.dropna(subset=["gw1"]).nlargest(3, "gw1")
            top3 = top3[["name", "team", "pos", "gw1"]].round(2)
            st.table(top3.rename(columns={"gw1": "GW points"}))
        else:
            st.info("GW data not available in current output.")

        # ===== Underperformers (Bottom 5 by predicted_points) =====
        st.subheader("⬇️ Who to lose? - Lowest Predicted Points (5)")
        if "predicted_points" in ft.columns and "name" in ft.columns:
            bottom5 = ft.dropna(subset=["predicted_points"]).nsmallest(5, "predicted_points")
            bottom5 = bottom5[["name", "team", "pos", "predicted_points"]].round(2)
            st.table(bottom5.rename(columns={"predicted_points": "Pred. points"}))
        else:
            st.info("Predicted points not available in current output.")


    # --- Tab 3 — Raw Output with Position Filter ---
    with tab3:
        player_output = st.session_state.player_output.sort_values(by="predicted_points", ascending=False)

        positions = player_output['pos'].unique().tolist()
        pos_filter = st.multiselect("Filter by position", options=positions, default=positions)
        filtered_df = player_output[player_output['pos'].isin(pos_filter)]

        # --- Robust styling for Research Players ---
        df = filtered_df.copy()

        # Make sure column names are strings (avoids rare KeyError cases)
        df.columns = df.columns.map(str)

        # Get numeric columns as a plain list
        num_cols = df.select_dtypes(include='number').columns.tolist()

        try:
            styler = df.style

            # Only apply gradient if we actually have numeric columns
            if num_cols:
                styler = styler.background_gradient(subset=num_cols, cmap="YlGnBu")

            # Always format numeric columns to 2dp
            styler = styler.format({c: "{:.2f}" for c in num_cols})

            st.dataframe(styler, use_container_width=True, height=800)
        except Exception:
            # If Styler chokes for any reason, just show the plain table (rounded)
            for c in num_cols:
                df[c] = pd.to_numeric(df[c], errors="coerce").round(2)
            st.dataframe(df, use_container_width=True, height=800)


    # --- Tab 4 — Fixture Difficulty ---
    with tab4:
        st.subheader("⚔️ Fixture Difficulty Rating")

        st.markdown("### 🔴 Attackers")
        numeric_cols_att = st.session_state.fdr_att.select_dtypes(include=[np.number]).columns
        styled_att = st.session_state.fdr_att.style.background_gradient(subset=numeric_cols_att, cmap="Reds").format(precision=2)
        st.dataframe(styled_att, use_container_width=True, height=500)

        st.markdown("### 🛡️ Defenders")
        numeric_cols_def = st.session_state.fdr_def.select_dtypes(include=[np.number]).columns
        styled_def = st.session_state.fdr_def.style.background_gradient(subset=numeric_cols_def, cmap="Blues").format(precision=2)
        st.dataframe(styled_def, use_container_width=True, height=500)